---
description: 
globs: 
alwaysApply: true
---
# Clear Guidelines for Claude Sonnet 3.7

# Stop & Ask

## Before Taking Actions:
- **Do not** install anything via terminal without explicit user confirmation.
- **Do not** install anything via brew without explicit user confirmation.
- **Do not** install pip dependencies; **only** update `requirements.txt`.
- **Do not** delete files; move them to `.unused`.

# Python Best Practices

## Project Structure
- Adopt `src/package_name/` layout.
- List dependencies explicitly in `requirements.txt`.
- Permanent tests in `tests/`.
- Temporary tests in `.tests/`.
- Configuration in `config/` or via environment variables.
- Move unused files to `.unused`.
- Store static files in `static/`, templates in `templates/`.

## Code Quality & Formatting
- Format code using Black.
- Sort imports with `isort`.
- Strict adherence to PEP 8.
- Maximum line length: 88 characters.
- Use absolute imports exclusively.
- Immediately fix all linting errors (no custom `.pylintrc`).

## Naming Conventions
- Variables/functions: `snake_case`.
- Classes: `PascalCase`.
- Constants: `UPPER_CASE`.

## Type Hints
- Annotate all functions with types.
- Use `typing` module types.
- Prefer `Optional[Type]` for nullable parameters.
- Define custom types in `types.py`.
- Employ Protocols for duck typing.

## Documentation
- Google-style docstrings.
- Maintain a clear, informative `README.md`.
- Generate thorough API documentation.

## Development Workflow
- Always use virtual environments (`venv`).
- Commit frequently, clearly, and granularly.
- Push logical changes regularly.
- Implement pre-commit hooks.
- Follow semantic versioning.
- Precise, minimal `.gitignore`.
- Include standard files: `CONTRIBUTING.md`, `LICENSE`, `.python-version`.
- Create `.env` and `.env-example` only if necessary.

## Dependencies
- Pin dependencies explicitly.
- Regularly audit and update.
- Clearly separate development dependencies.

## Testing
- Write comprehensive pytest tests.
- Ensure coverage via `pytest-cov`.
- Mock dependencies using `pytest-mock`.
- Automate all tests to run without interaction.

## Logging
- Centralize logs in `.logs/application.log`.
- Explicitly log and handle all exceptions and edge cases.

## General Organization & Maintenance
- Short, focused functions.
- Explicit modules based on responsibility.
- Define a clear main entry point (`main.py`).
- Wrap all file operations in `try-except` blocks.
- Debug thoroughly before commits.
- Regularly move unused assets to `.unused`.
- Store media (`background`, `images`, `music`, `sounds`, `sprites`) in `assets/`.

## Strict Folder Structure

```
your_project/
├─ .cursor/
├─ .logs/
├─ .tests/
├─ .unused/
├─ assets/
│  ├─ backgrounds/
│  ├─ images/
│  ├─ music/
│  ├─ sounds/
│  ├─ sprites/
│  ├─ backgrounds_generator.py
│  ├─ images_generator.py
│  ├─ music_generator.py
│  └─ sounds_generator.py
├─ config/
├─ src/
│  ├─ config.py
│  ├─ player.py
│  ├─ enemy.py
│  ├─ levels.py
│  └─ game_loop.py
├─ tests/
├─ main.py
├─ README.md
└─ requirements.txt
```